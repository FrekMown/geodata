{"version":3,"sources":["components/Navbar.js","components/CountryItems.js","components/IndicatorItems.js","components/Options.js","components/Plots.js","components/Summary.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","id","CountryInactiveItem","props","onClick","_","toggleCountry","country","alpha3Code","style","active","name","nativeName","src","flag","alt","CountryActiveItem","capital","region","subregion","Intl","NumberFormat","format","population","area","languages","map","l","join","IndicatorInactiveItem","setSelIndicator","indicator","backgroundColor","color","IndicatorActiveItem","sourceNote","INDICATORS_PER_PAGE","Options","useState","setActive","type","setType","countries","setCountries","topics","setTopics","currTopic","setCurrTopic","nPages","setNPages","currPage","setCurrPage","indicators","setIndicators","subregionCountries","setSubregionCountries","setSubregion","useEffect","undefined","plotlyRef","current","resizeHandler","fetch","then","response","json","data","catch","err","console","log","filter","addr","page","total","paginationButtons","indicatorElements","topicSelect","topicDescriptiveText","selectSubregions","addAllButton","countryItems","getPageForTopic","disabled","i","key","selIndicator","onChange","e","target","value","t","subregions","Array","from","Set","d","subr","length","addCountries","c","selCountries","includes","radioForm","defaultChecked","TYPES","Plots","selectType","selectYear","startAnimationButton","plotlyData","plotlyLayout","plotlyPlot","plotData","setPlotData","mapYear","setMapYear","optionsChosen","promises","countryId","item","year","parseInt","date","unit","Promise","all","newData","changeDataFormat","yearsOK","sort","a","b","yearsAnimation","intervalId","setInterval","pop","clearInterval","dataPlotCountry","x","y","showlegend","dataYear","allValues","locations","z","zmin","Math","min","zmax","max","autocolorscale","showscale","geo","projection","showframe","margin","r","autosize","uirevision","layout","ref","useResizeHandler","Summary","indicatorItem","removeAllButton","setIndicator","removeAllCountries","App","setSelCountries","useRef","newCountries","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.12360e56.chunk.js","sourcesContent":["import React from 'react';\nimport './Navbar.css';\n\nfunction Navbar() {\n  return (\n    <div id=\"Navbar\">\n      <div id=\"navbar-title\">\n        World Bank Indicators\n      </div>\n    </div>\n  );\n}\n\nexport default Navbar;\n","import React from 'react';\nimport './CountryItems.css';\n\nexport const CountryInactiveItem = (props) => (\n  <div \n    id=\"CountryInactiveItem\" \n    onClick={_ => props.toggleCountry(props.country.alpha3Code)}\n    style={props.active ? {\"backgroundColor\": \"darkblue\", \"color\": \"wheat\"} : {}}  \n  >\n    <div id=\"country-inactive-names\">\n      <div id=\"country-inactive-name\">{props.country.name}</div>\n      <div id=\"country-inactive-native-name\">\n        {props.country.nativeName === props.country.name ? \"\" : props.country.nativeName}\n      </div>\n    </div>\n    <div id=\"country-inactive-flag\">\n      <img src={props.country.flag} alt=\"\"/>\n    </div>\n  </div>\n);\n\nexport const CountryActiveItem = (props) => (\n  <div id=\"CountryActiveItem\"  onClick={_ => props.toggleCountry(props.country.alpha3Code)}>\n    <div id=\"country-active-first-line\">\n      <div id=\"country-active-alpha3Code\">{props.country.alpha3Code}</div>\n      <div id=\"country-active-title\">{props.country.name}</div>\n    </div>\n    <div id=\"country-active-first-block\">\n      <div id=\"country-active-first-block-left\">\n        <div id=\"country-active-flag\"><img src={props.country.flag} alt=\"\"/></div>\n      </div>\n      <div id=\"country-active-first-block-right\">\n        <div id=\"country-active-name\"><strong>Native name: </strong>{props.country.nativeName}</div>\n        <div id=\"country-active-capital\"><strong>Capital: </strong>{props.country.capital}</div>\n        <div id=\"country-active-region\"><strong>Region: </strong>{props.country.region} ({props.country.subregion})</div>\n      </div>\n    </div>\n    <div id=\"country-active-num\">\n      <div id=\"country-active-pop\"><strong>Population: </strong>{new Intl.NumberFormat('en-US').format(props.country.population)}</div>\n      <div id=\"country-active-area\"><strong>Area: </strong>{new Intl.NumberFormat('en-US').format(props.country.area)}</div>\n    </div>\n    <div id=\"country-active-lang\">\n      <strong>Languages: </strong>{props.country.languages.map(l => l.name).join(', ')}\n    </div>\n  </div>\n); ","import React from 'react';\nimport './IndicatorItems.css';\n\nexport const IndicatorInactiveItem = (props) => (\n  <div id=\"IndicatorInactiveItem\" \n    onClick={()=>props.setSelIndicator(props.indicator.id)}\n    style={props.active ? {backgroundColor: \"darkblue\", color: \"wheat\"} : {}}\n  >\n    <div id=\"indicator-inactive-id\">{props.indicator.id}</div>\n    <div id=\"indicator-inactive-name\">{props.indicator.name}</div>\n  </div>\n)\n\nexport const IndicatorActiveItem = (props) => (\n  <div id=\"IndicatorActiveItem\">\n    <div id=\"indicator-active-id\">{props.indicator.id}</div>\n    <div id=\"indicator-active-name\">{props.indicator.name}</div>\n    <div id=\"indicator-active-sourceNote\">{props.indicator.sourceNote}</div>\n  </div>\n)","import React, { useState, useEffect } from 'react';\nimport './Options.css';\nimport { CountryInactiveItem } from './CountryItems';\nimport { IndicatorInactiveItem } from './IndicatorItems';\n// import * as apiCalls from '../api'\n\nconst INDICATORS_PER_PAGE = 10;\n\nfunction Options(props) {\n  const [active, setActive] = useState(true);\n  const [type, setType] = useState('countries'); // can be either countries or indicators\n  const [countries, setCountries] = useState([]);\n  const [topics, setTopics] = useState([])\n  const [currTopic, setCurrTopic] = useState(\"0\");\n  // For pagination on indicators\n  const [nPages, setNPages] = useState(null);\n  const [currPage, setCurrPage] = useState(null);\n  const [indicators, setIndicators] = useState([]);\n  // For choosing subregion\n  const [subregionCountries, setSubregionCountries] = useState([]);\n  const [subregion, setSubregion] = useState(\"all\")\n\n  // For plotlyRef\n  useEffect(() => {\n    if (props.plotlyRef.current !== undefined && props.plotlyRef.current !== null) {\n      props.plotlyRef.current.resizeHandler();\n    }\n  }, [active, props.plotlyRef]);\n\n  // Load initial country data at the beginning\n  const fetchInitialCountryData = () => {\n    let addr = \"https://restcountries.eu/rest/v2/all?fields=name;alpha3Code;flag;nativeName;subregion\";\n    fetch(addr)\n      .then(response => response.json())\n      .then(data => {\n        setCountries(data);\n        setSubregionCountries(data);\n      })\n      .catch(err => console.log(err));\n  }\n  useEffect(fetchInitialCountryData, []);\n\n  // Choose countries depending on selected subregion\n  const filterSubregionCountries = () => {\n    if (subregion === \"all\") setSubregionCountries([...countries]);\n    else setSubregionCountries(countries.filter(country => country.subregion === subregion));\n  }\n  useEffect(filterSubregionCountries, [subregion]);\n\n  // Load initial topics\n  const fetchInitialTopics = () => {\n    let addr = \"https://api.worldbank.org/v2/topic?format=json\";\n    fetch(addr)\n      .then(response => response.json())\n      .then(data => setTopics(data[1]))\n      .catch(err => console.log(err));\n  }\n  useEffect(fetchInitialTopics, []);\n\n  // Load indicators when topics change\n  const fetchIndicatorsForTopic = () => {\n    if (currTopic !== \"0\") {\n      let addr = `https://api.worldbank.org/v2/topic/${currTopic}/indicator?format=json&per_page=${INDICATORS_PER_PAGE}`;\n      fetch(addr)\n        .then(response => response.json())\n        .then(data => {\n          setCurrPage(data[0].page);\n          setNPages(data[0].total);\n          setIndicators(data[1])\n        })\n        .catch(err => console.log(err));\n    }\n    else {\n      setIndicators([]);\n      setCurrPage(0);\n      setNPages(0);\n    }\n  }\n  useEffect(fetchIndicatorsForTopic, [currTopic]);\n\n  // When click on next page\n  const getPageForTopic = (page) => {\n    let addr = `https://api.worldbank.org/v2/topic/${currTopic}/indicator?format=json&per_page=${INDICATORS_PER_PAGE}&page=${page}`\n    fetch(addr)\n      .then(response => response.json())\n      .then(data => {\n        setCurrPage(data[0].page);\n        setNPages(data[0].total);\n        setIndicators(data[1]);\n      })\n      .catch(err => console.log(err));\n  }\n\n  // Create buttons for pagination on indicators for topic\n  let paginationButtons;\n  if (type===\"indicators\" && currTopic !== \"0\") {\n    paginationButtons = (\n      <div id=\"options-pagination\">\n        <button onClick={()=>getPageForTopic(currPage-1)} disabled={currPage<=1}>{\"<\"}</button>\n        <button onClick={()=>getPageForTopic(currPage+1)} disabled={currPage>=nPages}>{\">\"}</button>\n      </div>\n\n    );\n  }\n\n\n  // Create indicator items\n  let indicatorElements;\n  if (type === 'indicators') {\n    indicatorElements = (\n      <div id=\"options-indicators\">\n        {indicators.map(i => (\n          <IndicatorInactiveItem\n            key={i.id}\n            indicator={i}\n            setSelIndicator={props.setSelIndicator}\n            active={i.id === props.selIndicator}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  // Create select for topics\n  let topicSelect;\n  if (type === 'indicators') {\n    topicSelect = (\n      <select\n        onChange={e => setCurrTopic(e.target.value)}\n        value={currTopic}\n        id=\"options-select-topic\"\n      >\n        <option key={0} value={0}>Please Choose a Topic</option>\n        {topics.map(t => (<option key={t.id} value={t.id}>{t.value}</option>))}\n      </select>\n    );\n  }\n\n  // Create descriptive text for topics\n  let topicDescriptiveText;\n  if (type === 'indicators' && currTopic > 0) {\n    topicDescriptiveText = (\n      <div id=\"options-topics-description\">\n        {topics.filter(t => t.id === currTopic)[0].sourceNote}\n      </div>\n    );\n  }\n\n  // Selection for subregion\n  let selectSubregions;\n  if (type === 'countries') {\n    let subregions = Array.from(new Set(countries.map(d => d.subregion).filter(subr => subr.length>0)));\n    selectSubregions = (\n      <select \n        id=\"options-select-subregion\"\n        value={subregion}\n        onChange={e => setSubregion(e.target.value)}>\n        <option value={\"all\"} key={\"all\"}>All subregions</option>\n        {subregions.map(subregion => (<option key={subregion}>{subregion}</option>))}\n      </select>\n    );\n  }\n\n  // button to add all countries if subregion chosen\n  let addAllButton;\n  // if (type === \"countries\" && subregion !== \"all\") {\n  if (type === \"countries\") {\n    addAllButton = (\n      <button \n        onClick={() => props.addCountries(subregionCountries)} \n      >Add All</button>\n    );\n  } \n\n  // Create Country data\n  let countryItems;\n  if (type === 'countries') {\n    countryItems = subregionCountries.map(c => (\n      <CountryInactiveItem\n        country={c}\n        key={c.alpha3Code}\n        toggleCountry={props.toggleCountry}\n        active={props.selCountries.includes(c.alpha3Code)}\n      />\n    ));\n  }\n\n\n  // Create form for types (countries or indicators)\n  let radioForm = (\n    <form id=\"options-form\" onChange={e => setType(e.target.value)}>\n        <label>\n          <input type=\"radio\" value=\"countries\" name=\"type\" defaultChecked={type === \"countries\"} />\n          Countries\n        </label>\n        <label>\n          <input type=\"radio\" value=\"indicators\" name=\"type\" defaultChecked={type === \"indicators\"} />\n          Indicators\n        </label>\n    </form>\n  );\n\n  // Create main content and return it\n  let content;\n  if (active) {\n    content = (\n      <div id=\"Options\">\n        <div id=\"options-first-line\">\n          <div id=\"options-title\">Options</div>\n          <div id=\"options-close-button\" onClick={() => setActive(false)}>{\"<<\"}</div>\n        </div>\n        {radioForm}\n        {selectSubregions}\n        {addAllButton}\n        <div id=\"options-country-items\">\n          {countryItems}\n        </div>\n        {topicSelect}\n        {topicDescriptiveText}\n        {paginationButtons}\n        {indicatorElements}\n        {paginationButtons}\n      </div>\n    );\n  }\n  else {\n    content = (\n      <div id=\"options-hidden\" onClick={() => setActive(true)}>\n        <div>{\">>\"}</div>\n      </div>\n    );\n  }\n\n  return content;\n}\n\nexport default Options;\n","import React, { useState, useEffect } from 'react';\nimport './Plots.css';\nimport Plotly from 'react-plotly.js';\n\nconst TYPES = ['world_map', 'time_series'];\n\nfunction Plots(props) {\n  const [type, setType] = useState('time_series'); //can be world_map or time series\n  const [plotData, setPlotData] = useState([]); // list of elements {countryId: \"COL\", years: [], values:[]}\n  const [mapYear, setMapYear] = useState(0);\n\n  // Verify if user has chosen at least one country and one indicator\n  let optionsChosen = (props.selCountries.length > 0 && props.selIndicator.length > 0);\n \n  // Get data\n  const getDataWorldBank = () => {\n    // Returns a list of items from a list of lists\n    if (optionsChosen){\n      let changeDataFormat = (data) => {\n        let newData = [];\n        for (let item of data) {\n          if (item) newData = [...newData, ...item];\n        } \n        return newData;\n      }\n      // Create promises\n      let promises = props.selCountries.map(countryId => (\n        fetch(`https://api.worldbank.org/v2/country/${countryId}/indicator/${props.selIndicator}?format=json&frequency=Y&per_page=60`)\n          .then(response => response.json())\n          .then(data => data[1].filter(item => item.value !== null))\n          .then(data => data.map(item =>({\n            countryId: countryId,\n            year: parseInt(item.date),\n            value: item.value,\n            unit: item.unit\n          })))\n          .catch(err => console.log(countryId, err))\n      ));\n      // Solve promises and set data\n      Promise.all(promises)\n        .then(data => changeDataFormat(data))\n        .then(data => data.filter(item => item.value!==null))\n        .then(data => {\n          setPlotData(data);\n        })\n      }\n    } \n  useEffect(getDataWorldBank, [props.selCountries, props.selIndicator]);\n\n   // Create select menu to choose type\n   let selectType;\n   if (optionsChosen) {\n     selectType = (\n       <select id=\"plots-select-type\" value={type} onChange={e => setType(e.target.value)}>\n         { TYPES.map(t => (<option key={t}>{t}</option>)) }\n       </select>\n     );\n   }\n \n   // If type === world_map choose year to plot and start animation\n   let selectYear;\n   let startAnimationButton;\n   if (optionsChosen && type===\"world_map\") {\n     let yearsOK = Array.from(new Set(plotData.map(item => item.year))).sort((a,b) => b-a);\n\n     const startAnimation = () => {\n        let yearsAnimation = [...yearsOK];\n        let intervalId = setInterval(() => {\n          yearsAnimation.length>0 ? setMapYear(yearsAnimation.pop()): clearInterval(intervalId)\n        }, 500);\n     }\n     selectYear = (\n       <select id=\"plots-select-year\" value={mapYear} onChange={e => setMapYear(e.target.value)}>\n         <option key=\"\" value={0}>Year?</option>\n         { yearsOK.map(year => (<option key={year}>{year}</option>)) }\n       </select>\n     );\n     startAnimationButton = (\n       <button onClick={startAnimation}>\n         Start !\n       </button>\n     );\n   }  \n\n   /// ***  Plot ***\n   let plotlyData;\n   let plotlyLayout;\n   let plotlyPlot;\n\n  // Plot time series\n  if (optionsChosen && type === \"time_series\")  {\n    let countriesPlot = Array.from(new Set(plotData.map(item => item.countryId)));\n\n    plotlyData = countriesPlot.map(countryId => {\n      let dataPlotCountry = plotData.filter(item => item.countryId === countryId);\n      return {\n        x: dataPlotCountry.map(item => item.year),\n        y: dataPlotCountry.map(item => item.value),\n        name: countryId,\n        type: 'scatter',\n      }      \n    });\n\n    plotlyLayout = {\n      showlegend: true,\n    }\n  }\n\n  // Plot world map\n  if (optionsChosen && type === \"world_map\" && mapYear.length > 0) {\n    // Filter data for this specific year\n    let dataYear = plotData.filter(item => item.year === mapYear);\n    let allValues = plotData.map(item => item.value);\n  \n    plotlyData = [{\n      type: 'choropleth',\n      locations: dataYear.map(item => item.countryId),\n      z: dataYear.map(item => item.value),\n      zmin: Math.min(...allValues),\n      zmax: Math.max(...allValues),\n      autocolorscale: true,\n      showscale: true,\n    }]\n\n    plotlyLayout = {\n      geo: {\n        projection: {\n          type: \"mercator\",\n          showframe: false,\n        }\n      },\n      showframe: false,\n      margin: {\n        t: 0,\n        r: 0,\n        b: 0,\n        l: 0,\n      },\n      autosize: true,\n      uirevision: true,\n    }\n  }\n\n  // Creation of plotly object\n  if (plotlyData && plotlyLayout) {\n    plotlyPlot = (\n      <Plotly\n        data={plotlyData}\n        layout={plotlyLayout}\n        ref={props.plotlyRef}\n        useResizeHandler\n      />\n    );\n  }\n\n\n  return (\n    <div id=\"Plots\">\n      <div id=\"plots-title\">Plots</div>\n      <div id=\"plots-worldmap-form\">\n        {selectType}\n        {selectYear}\n        {startAnimationButton}\n      </div>\n      <div id=\"plot-plotly\">\n        {plotlyPlot}\n      </div>\n    </div>\n  );\n}\n\nexport default Plots;\n","import React, { useState, useEffect } from 'react';\nimport './Summary.css';\nimport { CountryActiveItem } from './CountryItems';\nimport { IndicatorActiveItem } from './IndicatorItems';\n\nfunction Summary(props) {\n  const [active, setActive] = useState(true);\n  const [countries, setCountries] = useState([]);\n  const [indicator, setIndicator] = useState(null); // Stores data for the selected indicator\n\n  // For plotlyRef\n  useEffect(() => {\n    if (props.plotlyRef.current !== undefined && props.plotlyRef.current !== null) {\n      props.plotlyRef.current.resizeHandler();\n    }\n  }, [active, props.plotlyRef]);\n\n  // Fetch data for selected indicator\n  const fetchSelIndicatorData = () => {\n    if (props.selIndicator.length > 0) {\n      let addr = `https://api.worldbank.org/v2/indicator/${props.selIndicator}?format=json`;\n      fetch(addr)\n        .then(response => response.json())\n        .then(data => setIndicator(data[1][0]))\n        .catch(err => console.log(err))\n    }\n    else setIndicator(null)\n  }\n  useEffect(fetchSelIndicatorData, [props.selIndicator]);\n\n  // Fetch detailed data for selected countries\n  const fetchSelCountriesData = () => {\n    if (props.selCountries.length > 0) {\n      let addr = `https://restcountries.eu/rest/v2/alpha/?codes=${props.selCountries.join(';')}`\n      fetch(addr)\n        .then(response => response.json())\n        .then(data => setCountries(data))\n        .catch(err => console.log(err));\n    }\n    else setCountries([]);\n  }\n  useEffect(fetchSelCountriesData, [props.selCountries]);\n\n  // Create Indicator item\n  let indicatorItem;\n  if (indicator !== null) {\n    indicatorItem = (\n      <>\n        <h3>Selected Indicator:</h3>\n        <IndicatorActiveItem\n          indicator={indicator}\n        />\n      </>\n    );\n  }\n\n  // Remove all button\n  let removeAllButton;\n  if (props.selCountries.length > 0) {\n    removeAllButton = (\n      <button onClick={props.removeAllCountries}>\n        Clear Countries\n      </button>\n    );\n  }\n\n  // Create Country items\n  let countryItems;\n  if (countries.length > 0) {\n    countryItems = (\n      <>\n        <h3>Selected Countries:</h3>\n        {countries.map(country => (\n          <CountryActiveItem\n            country={country}\n            key={country.alpha3Code}\n            toggleCountry={props.toggleCountry}\n          />\n        ))}\n      </>\n    );\n  }\n\n  \n\n  // Create main content and return it\n  let content;\n  if (active) {\n    content = (\n      <div id=\"Summary\">\n        <div id=\"summary-first-line\">\n          <div id=\"summary-close-button\" onClick={() => setActive(false)}>{\">>\"}</div>\n          <div id=\"summary-title\">Summary</div>\n        </div>\n        <div id=\"summary-indicator\">\n          {indicatorItem}\n        </div>\n        <div id=\"summary-countries\">\n          {removeAllButton}\n          {countryItems}\n        </div>\n      </div>\n    );\n  }\n  else {\n    content = (\n      <div id=\"summary-hidden\" onClick={() => setActive(true)}>\n        <div>{\"<<\"}</div>\n      </div>\n    );\n  }\n\n  return content;\n}\n\nexport default Summary;\n","import React, { useState, useRef } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar'\nimport Options from './components/Options'\nimport Plots from './components/Plots'\nimport Summary from './components/Summary'\n\nfunction App() {\n  const [selCountries, setSelCountries] = useState([]); //Stores countries IDs\n  const [selIndicator, setSelIndicator] = useState(''); // Stores indicator ID\n\n  // Plotly ref\n  const plotlyRef = useRef();\n\n  // Add or remove countries.\n  const toggleCountry = (countryId) => {\n    if (selCountries.includes(countryId)) setSelCountries(selCountries.filter(c => c!==countryId)); \n    else setSelCountries([...selCountries, countryId]);\n  }\n\n  // Add countries (for add all button)\n  const addCountries = (countries) => {\n    let countryIds = countries.map(country => country.alpha3Code);\n    let newCountries = countryIds.filter(countryId => !selCountries.includes(countryId));\n    setSelCountries([...selCountries, ...newCountries]);\n  }\n\n  // Remove countries (for remove all button)\n  const removeAllCountries = () => {\n    setSelCountries([]);\n  }\n\n\n  return (\n    <div id=\"App\">\n      <Navbar />\n      <div id=\"app-main-content\">\n        <Options \n          selCountries={selCountries}\n          selIndicator={selIndicator}\n          toggleCountry={toggleCountry}\n          setSelIndicator={setSelIndicator}\n          addCountries={addCountries}\n          plotlyRef={plotlyRef}\n          />\n        <Plots \n          selCountries={selCountries}\n          selIndicator={selIndicator}\n          plotlyRef={plotlyRef}\n          />\n        <Summary \n          selCountries={selCountries}\n          selIndicator={selIndicator}\n          toggleCountry={toggleCountry}\n          removeAllCountries={removeAllCountries}\n          plotlyRef={plotlyRef}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}